package CheckBoxDemo;

import java.awt.Image;
import java.awt.image;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.ImageIcon;

public class MainForm extends javax.swing.JFrame {
    StringBuffer opciones;
    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Configurador de cara");
        opciones = new StringBuffer("----");
        actualizarImagen();
        //implementar manejador cambio estado checkboxes
        ItemListener miItemListener = new ItemListener(){
            public void itemStateChanged(java.awt.event.ItemEvent e){
                int index =0;
                char opcion = '-';
                Object source = e.getItemSelectable();
                // A la barbilla le conrresponde una c (chin)
                if ( source == chkBarbilla){
                    index = 0 ;
                    opcion = 'c';
                //A los anteojos le corresponde una g (glasses)    
                } else if (source == chkAnteojos){
                    index = 1;
                    opcion = 'g';
                //Al cabello le corresponde una h (hair)    
                } else if (source == chkCabello){
                    index = 2;
                    opcion='h';
                //A los dientes le corresponde una t (theeth)
                
                } else if(source == chkDientes){
                    index = 3;
                    opcion = 't';
                } 
                //si la opcion fue desmarcada poner un -
                if (e.getStateChange()== ItemEvent.DESELECTED){
                    opcion='-';
                }
                //setear las nuevas opciones
                opciones.setCharAt(index, opcion);
                //Actualizar la imagen
                actualizarImagen();
            }
        };
        chkBarbilla.addItemListener(miItemListener);
        chkAnteojos.addItemListener(miItemListener);
        chkCabello.addItemListener(miItemListener);
        chkDientes.addItemListener(miItemListener);
        
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        chkBarbilla = new javax.swing.JCheckBox();
        chkAnteojos = new javax.swing.JCheckBox();
        chkCabello = new javax.swing.JCheckBox();
        chkDientes = new javax.swing.JCheckBox();
        lblImagen = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 204, 255));

        jLabel1.setText("Marque o desmarque las caracteristicas que quiera agregar o quitar:");

        chkBarbilla.setMnemonic('B');
        chkBarbilla.setText("Barbilla");

        chkAnteojos.setMnemonic('A');
        chkAnteojos.setText("Anteojos");

        chkCabello.setMnemonic('C');
        chkCabello.setText("Cabello");

        chkDientes.setMnemonic('D');
        chkDientes.setText("Dientes");

        lblImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/geek-----.gif"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkDientes)
                            .addComponent(chkCabello)
                            .addComponent(chkAnteojos)
                            .addComponent(chkBarbilla))
                        .addGap(100, 100, 100)
                        .addComponent(lblImagen))
                    .addComponent(jLabel1))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addGap(33, 33, 33)
                .addComponent(chkBarbilla)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chkAnteojos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkCabello)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkDientes))
                    .addComponent(lblImagen))
                .addContainerGap(108, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkAnteojos;
    private javax.swing.JCheckBox chkBarbilla;
    private javax.swing.JCheckBox chkCabello;
    private javax.swing.JCheckBox chkDientes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblImagen;
    // End of variables declaration//GEN-END:variables
    protected void actualizarImagen(){
        //obtener imagen
        ImageIcon icon = new ImageIcon(getClass().getResource("/imagenes/geek-" + opciones.toString()+ ".gif"));
        //escalar imagen
        Image image = icon.getImage();
        Image newImage = image.getScaledInstance(120, 120, java.awt.Image.SCALE_SMOOTH);
        icon = new ImageIcon(newImage);
        //asignar imagen al label
        lblImagen.setIcon(icon);
        lblImagen.setToolTipText(opciones.toString());
        if (icon == null){
            lblImagen.setText("Imagen faltante");
            
        }else {
            lblImagen.setText(null);
        }
    }
}
